"""
@generated
cargo-raze crate build file.

DO NOT EDIT! Replaced on runs of cargo-raze
"""

# buildifier: disable=load
load("@bazel_skylib//lib:selects.bzl", "selects")

# buildifier: disable=load
load(
    "@rules_rust//rust:rust.bzl",
    "rust_binary",
    "rust_library",
    "rust_test",
)

package(default_visibility = [
    # Public for visibility by "@raze__crate__version//" targets.
    #
    # Prefer access through "//bazel/cargo", which limits external
    # visibility to explicit Cargo.toml dependencies.
    "//visibility:public",
])

licenses([
    "notice",  # Apache-2.0 from expression "Apache-2.0 OR (Apache-2.0 OR MIT)"
])

# Generated Targets
# buildifier: disable=out-of-order-load
# buildifier: disable=load-on-top
load(
    "@rules_rust//cargo:cargo_build_script.bzl",
    "cargo_build_script",
)

cargo_build_script(
    name = "rsix_build_script",
    srcs = glob(["**/*.rs"]),
    build_script_env = {
    },
    crate_features = [
        "default",
    ],
    crate_root = "build.rs",
    data = glob(["**"]),
    edition = "2018",
    rustc_flags = [
        "--cap-lints=allow",
    ],
    tags = [
        "cargo-raze",
        "manual",
    ],
    version = "0.23.9",
    visibility = ["//visibility:private"],
    deps = [
        "@proxy_wasm_cpp_host__cc__1_0_72//:cc",
        "@proxy_wasm_cpp_host__rustc_version__0_4_0//:rustc_version",
    ] + selects.with_or({
        # cfg(all(not(rsix_use_libc), any(target_os = "linux"), any(target_arch = "x86", all(target_arch = "x86_64", not(target_pointer_width = "32")), target_arch = "arm", target_arch = "aarch64", target_arch = "riscv64")))
        (
            "@rules_rust//rust/platform:aarch64-unknown-linux-gnu",
            "@rules_rust//rust/platform:arm-unknown-linux-gnueabi",
            "@rules_rust//rust/platform:i686-unknown-linux-gnu",
            "@rules_rust//rust/platform:x86_64-unknown-linux-gnu",
        ): [
            "@proxy_wasm_cpp_host__linux_raw_sys__0_0_28//:linux_raw_sys",
        ],
        "//conditions:default": [],
    }) + selects.with_or({
        # cfg(any(rsix_use_libc, not(all(any(target_os = "linux"), any(target_arch = "x86", all(target_arch = "x86_64", not(target_pointer_width = "32")), target_arch = "arm", target_arch = "aarch64", target_arch = "riscv64")))))
        (
            "@rules_rust//rust/platform:aarch64-apple-darwin",
            "@rules_rust//rust/platform:aarch64-apple-ios",
            "@rules_rust//rust/platform:aarch64-linux-android",
            "@rules_rust//rust/platform:i686-apple-darwin",
            "@rules_rust//rust/platform:i686-linux-android",
            "@rules_rust//rust/platform:i686-pc-windows-msvc",
            "@rules_rust//rust/platform:i686-unknown-freebsd",
            "@rules_rust//rust/platform:powerpc-unknown-linux-gnu",
            "@rules_rust//rust/platform:s390x-unknown-linux-gnu",
            "@rules_rust//rust/platform:wasm32-unknown-unknown",
            "@rules_rust//rust/platform:wasm32-wasi",
            "@rules_rust//rust/platform:x86_64-apple-darwin",
            "@rules_rust//rust/platform:x86_64-apple-ios",
            "@rules_rust//rust/platform:x86_64-linux-android",
            "@rules_rust//rust/platform:x86_64-pc-windows-msvc",
            "@rules_rust//rust/platform:x86_64-unknown-freebsd",
        ): [
        ],
        "//conditions:default": [],
    }) + selects.with_or({
        # cfg(any(target_os = "android", target_os = "linux"))
        (
            "@rules_rust//rust/platform:aarch64-linux-android",
            "@rules_rust//rust/platform:aarch64-unknown-linux-gnu",
            "@rules_rust//rust/platform:arm-unknown-linux-gnueabi",
            "@rules_rust//rust/platform:i686-linux-android",
            "@rules_rust//rust/platform:i686-unknown-linux-gnu",
            "@rules_rust//rust/platform:powerpc-unknown-linux-gnu",
            "@rules_rust//rust/platform:s390x-unknown-linux-gnu",
            "@rules_rust//rust/platform:x86_64-linux-android",
            "@rules_rust//rust/platform:x86_64-unknown-linux-gnu",
        ): [
        ],
        "//conditions:default": [],
    }),
)

# Unsupported target "mod" with type "bench" omitted

# Unsupported target "process" with type "example" omitted

# Unsupported target "stdio" with type "example" omitted

# Unsupported target "time" with type "example" omitted

rust_library(
    name = "rsix",
    srcs = glob(["**/*.rs"]),
    aliases = {
    },
    crate_features = [
        "default",
    ],
    crate_root = "src/lib.rs",
    crate_type = "lib",
    data = [],
    edition = "2018",
    rustc_flags = [
        "--cap-lints=allow",
    ],
    tags = [
        "cargo-raze",
        "manual",
    ],
    version = "0.23.9",
    # buildifier: leave-alone
    deps = [
        ":rsix_build_script",
        "@proxy_wasm_cpp_host__bitflags__1_3_2//:bitflags",
        "@proxy_wasm_cpp_host__io_lifetimes__0_3_3//:io_lifetimes",
        "@proxy_wasm_cpp_host__itoa__0_4_8//:itoa",
    ] + selects.with_or({
        # cfg(all(not(rsix_use_libc), any(target_os = "linux"), any(target_arch = "x86", all(target_arch = "x86_64", not(target_pointer_width = "32")), target_arch = "arm", target_arch = "aarch64", target_arch = "riscv64")))
        (
            "@rules_rust//rust/platform:aarch64-unknown-linux-gnu",
            "@rules_rust//rust/platform:arm-unknown-linux-gnueabi",
            "@rules_rust//rust/platform:i686-unknown-linux-gnu",
            "@rules_rust//rust/platform:x86_64-unknown-linux-gnu",
        ): [
            "@proxy_wasm_cpp_host__linux_raw_sys__0_0_28//:linux_raw_sys",
        ],
        "//conditions:default": [],
    }) + selects.with_or({
        # cfg(any(rsix_use_libc, not(all(any(target_os = "linux"), any(target_arch = "x86", all(target_arch = "x86_64", not(target_pointer_width = "32")), target_arch = "arm", target_arch = "aarch64", target_arch = "riscv64")))))
        (
            "@rules_rust//rust/platform:aarch64-apple-darwin",
            "@rules_rust//rust/platform:aarch64-apple-ios",
            "@rules_rust//rust/platform:aarch64-linux-android",
            "@rules_rust//rust/platform:i686-apple-darwin",
            "@rules_rust//rust/platform:i686-linux-android",
            "@rules_rust//rust/platform:i686-pc-windows-msvc",
            "@rules_rust//rust/platform:i686-unknown-freebsd",
            "@rules_rust//rust/platform:powerpc-unknown-linux-gnu",
            "@rules_rust//rust/platform:s390x-unknown-linux-gnu",
            "@rules_rust//rust/platform:wasm32-unknown-unknown",
            "@rules_rust//rust/platform:wasm32-wasi",
            "@rules_rust//rust/platform:x86_64-apple-darwin",
            "@rules_rust//rust/platform:x86_64-apple-ios",
            "@rules_rust//rust/platform:x86_64-linux-android",
            "@rules_rust//rust/platform:x86_64-pc-windows-msvc",
            "@rules_rust//rust/platform:x86_64-unknown-freebsd",
        ): [
            "@proxy_wasm_cpp_host__errno__0_2_8//:errno",
            "@proxy_wasm_cpp_host__libc__0_2_107//:libc",
        ],
        "//conditions:default": [],
    }) + selects.with_or({
        # cfg(any(target_os = "android", target_os = "linux"))
        (
            "@rules_rust//rust/platform:aarch64-linux-android",
            "@rules_rust//rust/platform:aarch64-unknown-linux-gnu",
            "@rules_rust//rust/platform:arm-unknown-linux-gnueabi",
            "@rules_rust//rust/platform:i686-linux-android",
            "@rules_rust//rust/platform:i686-unknown-linux-gnu",
            "@rules_rust//rust/platform:powerpc-unknown-linux-gnu",
            "@rules_rust//rust/platform:s390x-unknown-linux-gnu",
            "@rules_rust//rust/platform:x86_64-linux-android",
            "@rules_rust//rust/platform:x86_64-unknown-linux-gnu",
        ): [
            "@proxy_wasm_cpp_host__once_cell__1_8_0//:once_cell",
        ],
        "//conditions:default": [],
    }),
)

# Unsupported target "fs" with type "test" omitted

# Unsupported target "io" with type "test" omitted

# Unsupported target "net" with type "test" omitted

# Unsupported target "path" with type "test" omitted

# Unsupported target "process" with type "test" omitted

# Unsupported target "rand" with type "test" omitted

# Unsupported target "thread" with type "test" omitted

# Unsupported target "time" with type "test" omitted
