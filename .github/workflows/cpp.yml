# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: C++

on:

  pull_request:
    branches:
    - master
    - 'envoy-release/**'
    - 'istio-release/**'

  push:
    branches:
    - master
    - 'envoy-release/**'
    - 'istio-release/**'

jobs:

  format:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-go@v2
      with:
        go-version: '^1.16'

    - name: Format (clang-format)
      run: |
        sudo apt-get install clang-format-9
        find . -name "*.h" -o -name "*.cc" -o -name "*.proto" | grep -v ".pb." | xargs -n1 clang-format-9 -i
        git diff --exit-code

    - name: Format (buildifier)
      run: |
        go install github.com/bazelbuild/buildtools/buildifier@latest
        export PATH=$PATH:$(go env GOPATH)/bin
        find . -name "BUILD" | xargs -n1 buildifier -mode=check

    - name: Format (addlicense)
      run: |
        go install github.com/google/addlicense@latest
        export PATH=$PATH:$(go env GOPATH)/bin
        addlicense -check .

  build:
    name: build (${{ matrix.name }})

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
        - name: 'V8 on Windows #1 (full)'
          runtime: 'v8'
          os: windows-2019
          flags: '--linkopt=/DEBUG:FULL'
        - name: 'V8 on Windows #2 (fastlink)'
          runtime: 'v8'
          os: windows-2019
          flags: '--linkopt=/DEBUG:FASTLINK'
        - name: 'V8 on Windows #3 (none)'
          runtime: 'v8'
          os: windows-2019
          flags: '--linkopt=/DEBUG:NONE'

    steps:
    - uses: actions/checkout@v2

    - name: Install dependency (Linux)
      if: startsWith(matrix.os, 'ubuntu')
      run: sudo apt-get install ninja-build

    - name: Install dependency (macOS)
      if: startsWith(matrix.os, 'macos')
      run: brew install ninja

    - name: Bazel cache
      if: matrix.runtime != 'wasmtime'
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/bazel
          /private/var/tmp/_bazel_runner/
        key: bazel-${{ matrix.os }}-${{ matrix.runtime }}-${{ hashFiles('WORKSPACE', '.bazelrc', '.bazelversion', 'bazel/cargo/Cargo.raze.lock', 'bazel/dependencies.bzl', 'bazel/repositories.bzl') }}

    - name: Generate inspector files
      if: matrix.runtime == 'v8'
      run: |
        bazel build ${{ matrix.flags }} --verbose_failures --test_output=errors --define runtime=${{ matrix.runtime }} @v8//:generated_inspector_files

    - name: Generate torque files
      if: matrix.runtime == 'v8'
      run: |
        bazel build ${{ matrix.flags }} --verbose_failures --test_output=errors --define runtime=${{ matrix.runtime }} @v8//:noicu/generated_torque_files

    - name: Test
      run: |
        bazel test ${{ matrix.flags }} --verbose_failures --test_output=errors --define runtime=${{ matrix.runtime }} //test/... || cat bazel-out/x64_windows-fastbuild/bin/external/v8/v8_libshared_noicu.lo.lib-2.params

    - name: Test (signed Wasm module)
      run: |
        bazel test ${{ matrix.flags }} --verbose_failures --test_output=errors --define runtime=${{ matrix.runtime }} --per_file_copt=src/signature_util.cc,test/signature_util_test.cc@-DPROXY_WASM_VERIFY_WITH_ED25519_PUBKEY=\"$(xxd -p -c 256 test/test_data/signature_key1.pub | cut -b9-)\" //test:signature_util_test

    - name: Cleanup Bazel cache
      if: matrix.runtime != 'wasmtime'
      run: |
        export OUTPUT=$(bazel info output_base)
        # BoringSSL's test data (90 MiB).
        rm -rf ${OUTPUT}/external/boringssl/crypto_test_data.cc
        rm -rf ${OUTPUT}/external/boringssl/src/crypto/*/test/
        rm -rf ${OUTPUT}/external/boringssl/src/third_party/wycheproof_testvectors/
        # LLVM's tests (500 MiB).
        rm -rf ${OUTPUT}/external/llvm*/test/
        # V8's tests (100 MiB).
        if [ -d "${OUTPUT}/external/v8/test/torque" ]; then
          mv ${OUTPUT}/external/v8/test/torque ${OUTPUT}/external/v8/test_torque
          rm -rf ${OUTPUT}/external/v8/test/*
          mv ${OUTPUT}/external/v8/test_torque ${OUTPUT}/external/v8/test/torque
        fi
        # Unnecessary CMake tools (65 MiB).
        rm -rf ${OUTPUT}/external/cmake-*/bin/{ccmake,cmake-gui,cpack,ctest}
        # Distfiles for Rust toolchains (350 MiB).
        rm -rf ${OUTPUT}/external/rust_*/*.tar.gz
        # Bazel's repository cache (650-800 MiB) and install base (155 MiB).
        rm -rf $(bazel info repository_cache)
        rm -rf $(bazel info install_base)
